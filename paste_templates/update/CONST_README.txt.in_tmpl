Introduction
============

c2cgeoportal can't be used directly. It should be included in a project 
like this:

c2cgeoportal - svn:externals to c2cgeoportal svn
tilecache/tilecache.cfg.in - tilecache configuration (parent only)
bootstrap.py - used to initialize the buildout environment
buildout*.cfg - buildout scripts that contain the configuration variables
buildout - empty directory needed by buildout
deploy/deploy.cfg.in - deployment configuration
print/config.yaml.in - print configuration
print/... - images and other files needed by the print
mapserver/c2cgeoportal.map.in - the mapfile
${project}/static/lang/*.js - the localisation


Installation of the project
===========================

go to the project directory (that includes c2cgeoportal)

Install the buildout environment:

  python bootstrap.py --version 1.5.2 --distribute --download-base \
        http://pypi.camptocamp.net/ --setup-source \
        http://pypi.camptocamp.net/distribute_setup.py

Build c2cgeoportal (_dev for development build):

  ./buildout/bin/buildout -c c2cgeoportal/buildout_build.cfg 

Install the project:
    
  ./buildout/bin/buildout -c buildout_$$USER.cfg

Now look at apache/README.txt and go configure your Apache virtual host.


Create the DataBase tables
==========================

The project should already be built (see below).

* If the database doesn't exist, create it (replace $${vars:db} by what you want):
    sudo -u postgres createdb $${vars:db} -T template_postgis

* The schema shouldn't exist then create it (replace $${vars:schema} by the schema name if different):
    sudo -u postgres psql -c "CREATE SCHEMA $${vars:schema};" $${vars:db}
    sudo -u postgres psql -c "GRANT ALL ON SCHEMA $${vars:schema} TO \"$${vars:dbuser}\";" $${vars:db}

* Create the tables and populate them:
    sudo -u $${vars:dbuser} buildout/bin/create_db CONST_development.ini -p

* Set the version
    sudo -u $${vars:dbuser} ./buildout/bin/manage_db version_control --VERSION `./buildout/bin/manage_db version`


Create and Populate the FullTextSearch table
============================================

The database should already exist (see above).

To simplify we consider that the used schema is '$${vars:schema}'.

* Connect to postgres:
    sudo -u $${vars:dbuser} psql $${vars:db}
    
* Create the table:
    CREATE TABLE $${vars:schema}.tsearch (id SERIAL PRIMARY KEY, layer_name TEXT, label TEXT, ts TSVECTOR);
    SELECT AddGeometryColumn ('$${vars:schema}', 'tsearch', 'the_geom', ${srid}, 'GEOMETRY', 2);
    CREATE INDEX tsearch_ts_idx ON $${vars:schema}.tsearch USING gin(ts);
    GRANT SELECT ON TABLE $${vars:schema}.tsearch TO "$${vars:dbuser}";

Populate
--------
* With one value (adapt sample coordinates to match projection EPSG:${srid}):
    INSERT INTO $${vars:schema}.tsearch (the_geom, layer_name, label, ts) VALUES (ST_GeomFromText('POINT(2660000 1140000)', ${srid}), 'Layer name', 'text to display', to_tsvector('german', 'text to search'));

* With a sub select:
    INSERT INTO $${vars:schema}.tsearch (the_geom, layer_name, label, ts) SELECT ST_GeomFromText(ST_AsText(geom), ${srid}), 'layer group name', text, to_tsvector('german', text) FROM table;
  - layer group name should be replaced by the name of the layer group.
  - text can be replaced by any postgres function.

Create a WMTS layer
===================

* Make sure that /var/sig/tilecache/ exists and is writeable by the user 'www-data'.
* Add the matching layers definitions in the mapfile (mapserver/c2cgeoportal.map.in).
* Add a layer entry in tilecache/tilecache.cfg.in. The "layers" attribute must contain the list of mapserver layers defined above.
* Update the layers sources list ("viewer_layers" block) in the ${package}/templates/viewer.js template. The "layer" parameter is the name of the tilecache layer entry just added in tilecache/tilecache.cfg.in.

QueryBuilder
============

* In the mapfile define a layer with:
    TEMPLATE fooOnlyForWMSGetFeatureInfo
    DUMP TRUE
* And the METADATA:
   "gml_include_items" "all"
* In the file ${package}/templates/viewer.js update the block:
    <%block name="viewer_tools_querier_options">\
        srsName: 'EPSG:${srid}',
        featureType: "Query_layer",
    </%block>\


Queryable Layer (GetFeatureInfo)
================================

* In the mapfile define a layer with:
    TEMPLATE fooOnlyForWMSGetFeatureInfo
    DUMP TRUE
* And the METADATA:
    "gml_include_items" "all"
    "ows_geom_type" "polygon"
    "ows_geometries" "geom"
 

Restricted layer
================

The restricted layers work only with postgres data.
All layer defined as restricted in the MapFile should be defined as well in the 
admin interface and vice versa.

To define a restricted layer in the mapfile we should define the DATA in the layer 
like (in one line):
    DATA "geometrie FROM (SELECT geo.geom as geom 
        FROM geodata.table AS geo, $$$${mapserver_join_tables} 
        WHERE ST_Contains($$$${mapserver_join_area}, geo.geometrie) 
        AND $$$${mapserver_join_where} 'layer_name') AS foo 
        USING UNIQUE gid USING srid=-1"
And in the METADATA of the layer:
    $$$${mapserver_layer_metadata}
The important point is to have $$$${mapserver_join_tables} in the table list,
have ST_Contains($$$${mapserver_join_area}, geo.geometrie) 
AND $$$${mapserver_join_where} 'layer_name' in the where clause to do the 
restriction. The first part is used to filter on the geometry, the second is to
do the table joining and select the right layer.

The metadata section is needed because mapserver 6 applies a validation with a pattern
for all the variable substitution present in the DATA.

This should be in a .map.in because it uses template variable that is replaced by 
SQL code in the .map file.


Print config.yaml templating
============================

If you intend to have more than one paper format for your PDF
print output, a templating system is implemented to allow you to use mako
template so you dont have to duplicate huge quantiy of code in your config.yaml.

The system checks if there is a file "print.mako" in a folder "templates" in 
the "print" folder (print/templates/print.mako).
If that file exists, it will be used to generate the file "config.yaml" placed 
in the "print" folder.
If the file does not exist, the system does nothing.

It is possible to manually trigger the system by calling the following command:

./buildout/bin/print_tpl

If you want to include some buildout variables in your mako template, you need to 
add a .in extension to your mako template(s) as the variable replacement must be done 
before the mako templating is called (for example print/templates/print.mako.in)

In the default template we have two base print template A4_portrait.mako and
A3_landscape.mako where we have some blocks like:
<%def name="title()">\
1 A4 portrait\
</%def>
And in A3_landscape_inherit.mako and A4_portrait_inherit.mako thoses block will 
be redefined.
The print.mako.in has the "header" part and includes the wanted templates.


Internationalization
====================

Client
------

For the client parts you have localisation files at 
'${package}/static/js/Proj/Lang/lang.js' where lang is the ISO 639-1 
code, ex: en, de or fr.

Server
------

1) Extract all messages from the project:

  ./buildout/bin/python setup.py extract_messages

2) Initialize a catalog for every supported language, for example:

  ./buildout/bin/python setup.py init_catalog -l en
  ./buildout/bin/python setup.py init_catalog -l fr
  ./buildout/bin/python setup.py init_catalog -l de

3) Edit the .po files in ${package}/locale/*/LC_MESSAGES/${package}.po

4) Run buildout to compile all the .po files to .mo:

  ./buildout/bin/buildout -c buildout_$$USER.cfg

5) Finally don't forget to restart apache:

  sudo apache2ctl graceful

When you add a new message repeat all steps but replace the step 2) by :

  ./buildout/bin/python setup.py update_catalog

c2cgeoportal
------------

If you want to translate the c2cgeoportal part of the admin interface, 
go to the c2cgeoportal directory, and do the same steps by replacing
'./buildout/bin/python' by '../buildout/bin/python'.


Source: http://wiki.pylonshq.com/display/pylonsdocs/Internationalization+and+Localization


Deployment 
===========

From dev to demo
----------------
  ssh devserver
  cd /var/www/your_vhost/public/Project
  svn up # update the code
  ./buildout/bin/buildout -c c2cgeoportal/buildout_build.cfg # build c2cgeoportal
  ./buildout/bin/buildout -c buildout_main.cfg # configure c2cgeoportal
  ### Test on the dev server ###
  cd deploy
  sudo -u deploy deploy -r deploy.cfg demo 
  ### Test on the demo server ###

From demo to prod
-----------------
  ### Test on the demo server ###
  cd deploy
  sudo -u deploy deploy -r deploy.cfg prod 
  ### Test on the prod server ###


Database migration
==================

To migrate the database we use the sqlalchemy-migrate framwork.

c2cgeoportal version:
    ./buildout/bin/manage_db version

Database version:
    ./buildout/bin/manage_db db_version

Upgrade:
    ./buildout/bin/manage_db upgrade


Update c2cgeoportal
===================

* Update c2cgeoportal
    svn up

* Build it
    ./buildout/bin/buildout -c buildout_$$USER.cfg

* Apply update template ('IOError: No egg-info directory found (...)' should be ignore)
    ./buildout/bin/paster create --template=c2cgeoportal_update --output-dir=.. \
            ${project} package=${package} srid=${srid}


Testing
=======

Run the tests: 
* Have the c2cgeoportal as a dev egg

* run buildout
    ./buildout/bin/buildout -c buildout_$$USER.cfg:
* run the tests
   . buildout/bin/activate
   cd c2cgeoportail/
   nosetests
   cd -
   desactivate


Some tip for posix tools users
==============================

* Have the toc of this document
   grep -B1 ^=== CONST_README.txt

* Display only one chapter
   grep -A30 "Title" CONST_README.txt
