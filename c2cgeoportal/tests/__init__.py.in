"""Pyramid application test package
"""
from unittest import TestCase

from pyramid import testing
from pyramid.interfaces import IRoutesMapper, IStaticURLInfo

import c2cgeoportal

c2cgeoportal.schema = 'test' 

sqlalchemy_url = 'postgresql://${dbuser}:${dbpassword}@${dbhost}:${dbport}/${db}'
mapserv_url = '${mapserv_url}'
external_themes_url = '${external_themes_url}'
encodedLayers_plan = '${encodedLayers_plan}'
encodedLayers_plan_color = '${encodedLayers_plan_color}'
encodedLayers_ortho = '${encodedLayers_ortho}'
anonymous_functionalities = ${anonymous_functionalities|path-repr}
registered_functionalities = ${registered_functionalities|path-repr}
webclient_string_functionalities = '${webclient_string_functionalities}'
webclient_array_functionalities = '${webclient_array_functionalities}'
mapserv_host = '${vars:mapserv_host}'
instanceid = '${vars:instanceid}'


class TestView(TestCase):

    def setUp(self):
        self.config = testing.setUp()

    def tearDown(self):
        testing.tearDown()

class DummyRequest(testing.DummyRequest):
    def __init__(self, params={}):
        testing.DummyRequest.__init__(self, params=params)
        info = DummyStaticURLInfo('c2cgeoportal_dummy')
        self.registry.registerUtility(info, IStaticURLInfo)
        self.registry.registerUtility(DummyRoutesMapper(), IRoutesMapper)
        self.registry.settings = {
            "external_themes_url": external_themes_url,
            'anonymous_functionalities': anonymous_functionalities,
            'registered_functionalities': registered_functionalities,
            'webclient_string_functionalities': webclient_string_functionalities,
            'webclient_array_functionalities': webclient_array_functionalities,
            'encodedLayers_plan': encodedLayers_plan,
            'encodedLayers_plan_color': encodedLayers_plan_color,
            'encodedLayers_ortho': encodedLayers_ortho,
        }

class DummyRoute:
    pregenerator = None
    name = 'route'
    def __init__(self, result='/%s/wsgi/mapserv_proxy'%instanceid):
        self.result = result

    def generate(self, kw):
        self.kw = kw
        return self.result

    def pregenerator(self, request, elements, kw):
        return (), {'_app_url':'http://' + mapserv_host}

class DummyRoutesMapper:
    raise_exc = None
    def __init__(self, route=DummyRoute(), raise_exc=False):
        self.route = route

    def get_route(self, route_name):
        return self.route

class DummyStaticURLInfo:
    def __init__(self, result):
        self.result = result

    def generate(self, path, request, **kw):
        self.args = path, request, kw
        return self.result
