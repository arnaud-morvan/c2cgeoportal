.. _integrator_create_application:

Create an application
=====================

Creating a c2cgeoportal application is done by applying two Paste skeletons
(a.k.a. templates). These skeletons are provided by the ``c2cgeoportal``
package. So to be able to create a c2cgeoportal application the
``c2cgeoportal`` package must be installed.

Install c2cgeoportal
--------------------

For creating a c2cgeoportal application the ``c2cgeoportal`` package is
typically installed in a virtual Python environment created with
``virtualenv``.

Download the ``virtualenv`` script::

    $ wget http://www.mapfish.org/downloads/virtualenv-1.4.5.py

Create a virtual env, and activate it::

    $ python virtualenv-1.4.5.py --distribute --no-site-packages env
    $ source env/bin/activate

Download ``c2cgeoportal`` and install it the virtual env::

    (env) $ svn export https://project.camptocamp.com/svn/c2c_mapfish/c2cgeoportal/trunk c2cgeoportal
    (env) $ cd c2cgeoportal; python setup_install.py develop; cd -

Note that ``setup_install.py`` is used in place of the usual ``setup.py`` here.

.. note::

    ``c2cgeoportal`` also includes a ``setup.py`` file, but when running
    ``python setup.py develop`` (or ``python setup.py install``)
    ``c2cgeoportal`` and all its dependencies are installed. In contrast
    ``setup_install.py`` just installs ``c2cgeoportal`` and ``PasteScript``,
    which is all we need to create an application by applying the
    ``c2cgeoportal`` skeletons.

Create the application
----------------------

To create the application first apply the ``c2cgeoportal_create`` skeleton::

    (env) $ paster create --template=c2cgeoportal_create

You'll be asked to enter the project name and the SRID for this project. Just
ignore the ``IOError: No egg-info directory found (...)`` error message.

Now apply the ``c2cgeoportal_update`` skeleton::

    (env) $ paster create --template=c2cgeoportal_update

Enter the same projet name and SRID as before. And again, ignore the
``IOError: No egg-info directory found (...)`` error message.

.. note::

    The ``c2cgeoportal_update`` skeleton is also used to update the
    application. The files generated by this skeleton are prefixed with
    ``CONST_``, which means they are *constant* files that should not changed.
    Following this rule is important for easing updates.

At this point you no longer need the virtual env and the ``c2cgeoportal`` tree,
so you can deactivate the virtual env, and remove the ``c2cgeoportal`` and
``env`` directories::

    (env) $ deactivate
    $ rm -rf env c2cgeoportal

And remove the ``egg-info`` directory, as it shouldn't be added to the
source repository::

    $ rm -rf <project_name>/*.egg-info

If this application is not part of a parent/child architecture, or is
a ``child`` application, you can just remove the ``buildout_parent.cfg`` file::

    $ rm buildout_parent.cfg

If this application is a ``parent`` application make ``buildout_parent.cfg``
the main Buildout configuration file::

    $ rm buildout.cfg
    $ mv buildout_parent.cfg buildout.cfg

.. note::

    In a parent/child architecture one instance of the application is the
    parent, the others are children. Child instances display layers
    served by the parent instance. Parent and child instances share
    the same database, but use dedicated schemas within that database.

Now is a good time to put the application source code under revision
control (Git preferably).

Minimal setup of the application
--------------------------------

This section provides the minimal set of things to do to get a working
application.

Defining background layers
~~~~~~~~~~~~~~~~~~~~~~~~~~

A c2cgeoportal application has *background layers* and *overlays*. Background
layers, also known as base layers, sit at the bottom of the map. They're
typically cached layers. Overlays represent application-specific data. They're
displayed on top of background layers.

Background layers are created by the application integrator, while overlays are
created by the application administrator. This is why only background layers
are covered here in the Integrator Guide. Defining overlays is described in the
:ref:`administrator_guide`.

**To Be Completed**
